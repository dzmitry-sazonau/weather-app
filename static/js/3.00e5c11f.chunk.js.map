{"version":3,"sources":["model/highlight.ts","components/shared/Slider.tsx","components/features/Dashboard/HighlightCard.tsx","components/features/Dashboard/HighlightListCard.tsx","hooks/useHighlight.ts"],"names":["HighlightType","StyledSlider","styled","div","StyledPositions","StyledText","props","theme","color","gray_4","StyledProgressBar","white","StyledProgress","percent","yellow","StyledPercent","Slider","React","memo","StyledCard","default","black_3","StyledTitle","StyledValue","fontWeight","bold","StyledSubValue","HighlightCard","highlight","type","label","value","subValue","slider","Wrap","breakpoints","xl","StyledListCard","HighlightListCard","highlights","weather","wind_speed","toFixed","direction","wind_direction_compass","humidity","visibility","air_pressure","useHighlight","useSelector","getActiveWeather","map"],"mappings":"0JAOYA,E,+6BAAAA,O,qBAAAA,I,mBAAAA,I,0BAAAA,M,KCIZ,IAAMC,EAAeC,IAAOC,IAAV,KAMZC,EAAkBF,IAAOC,IAAV,KAMfE,EAAaH,IAAOC,IAAV,KAEJ,SAACG,GAAD,OAAWA,EAAMC,MAAMC,MAAMC,UAGnCC,EAAoBR,IAAOC,IAAV,KAMP,qBAAGI,MAAkBC,MAAMG,SAGrCC,EAAiBV,IAAOC,IAAV,KAET,qBAAGU,WAGE,qBAAGN,MAAkBC,MAAMM,UAGrCC,EAAgBb,IAAOC,IAAV,KAMNa,EAASC,IAAMC,MAAK,YAA4C,IAAzCL,EAAwC,EAAxCA,QAClC,OACE,eAACZ,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,gBACA,cAACA,EAAD,iBACA,cAACA,EAAD,qBAGF,cAACK,EAAD,UACE,cAACE,EAAD,CAAgBC,QAASA,MAG3B,cAACE,EAAD,UACE,cAACV,EAAD,wB,8hBCpDR,IAAMc,EAAajB,IAAOC,IAAV,KACJ,SAACG,GAAD,OAAWA,EAAMc,QAAU,QAAU,WAEjC,qBAAGb,MAAkBC,MAAMa,WAQrCC,EAAcpB,IAAOC,IAAV,KAIXoB,EAAcrB,IAAOC,IAAV,KACA,qBAAGI,MAAkBiB,WAAWC,QAK3CC,EAAiBxB,IAAOC,IAAV,KAGPwB,EAAgB,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,UAC9B,OACE,eAACT,EAAD,CAAYC,QAASQ,EAAUC,OAAS7B,EAAcoB,QAAtD,UACE,cAACE,EAAD,UAAcM,EAAUE,QAExB,cAACP,EAAD,UAAcK,EAAUG,QAEvBH,EAAUI,UAAY,cAACN,EAAD,UAAiBE,EAAUI,WAEjDJ,EAAUC,OAAS7B,EAAciC,QAAU,cAACjB,EAAD,CAAQH,QAASe,EAAUG,Y,moBCrC7E,IAAMG,EAAOhC,IAAOC,IAAV,IAMNgC,IAAYC,IAKVC,EAAiBnC,IAAOC,IAAV,IAQhBgC,IAAYC,IAMVd,EAAcpB,IAAOC,IAAV,KAMF,SAASmC,IACtB,IACMC,ECvCO,SAAsBC,GAAgC,IAAD,IAClE,MAAO,CACL,CACEV,MAAO,cACPC,MAAM,GAAD,iBAAKS,EAAQC,kBAAb,aAAK,EAAoBC,UAAzB,QACLb,KAAM7B,EAAc2C,UACpBX,SAAUQ,EAAQI,wBAEpB,CACEd,MAAO,WACPC,MAAM,GAAD,OAAKS,EAAQK,SAAb,KACLhB,KAAM7B,EAAciC,QAEtB,CACEH,MAAO,aACPC,MAAM,GAAD,iBAAKS,EAAQM,kBAAb,aAAK,EAAoBJ,QAAQ,GAAjC,UACLb,KAAM7B,EAAcoB,SAEtB,CACEU,MAAO,eACPC,MAAM,GAAD,OAAKS,EAAQO,aAAaL,UAA1B,OACLb,KAAM7B,EAAcoB,UDkBL4B,CADGC,YAAYC,MAGlC,OACE,eAAChB,EAAD,WACE,cAAC,EAAD,sCACA,cAACG,EAAD,UACGE,EAAWY,KAAI,SAACvB,GAAD,OACd,cAAC,EAAD,CAAqCA,UAAWA,GAA5BA,EAAUG","file":"static/js/3.00e5c11f.chunk.js","sourcesContent":["export interface Highlight {\n  label: string;\n  value: string;\n  type: HighlightType;\n  subValue?: string;\n}\n\nexport enum HighlightType {\n  default,\n  slider,\n  direction\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface SliderProps {\n  percent: string;\n}\n\ninterface StyledProgressProps {\n  percent: string;\n}\n\nconst StyledSlider = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\n\nconst StyledPositions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n`\n\nconst StyledText = styled.div`\n  line-height: 14px;\n  color:  ${(props) => props.theme.color.gray_4};\n`\n\nconst StyledProgressBar = styled.div`\n  position: relative;\n  width: 100%;\n  height: 8px;\n  border-radius: 80px;\n  margin: 8px 0;\n  background: ${({ theme }) => theme.color.white};\n`\n\nconst StyledProgress = styled.div<StyledProgressProps>`\n  position: absolute;\n  width: ${({ percent }) => percent};\n  height: 8px;\n  border-radius: 80px;\n  background: ${({ theme }) => theme.color.yellow};\n`\n\nconst StyledPercent = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n`\n\nexport const Slider = React.memo(({ percent }: SliderProps): JSX.Element => {\n  return (\n    <StyledSlider>\n      <StyledPositions>\n        <StyledText>0</StyledText>\n        <StyledText>50</StyledText>\n        <StyledText>100</StyledText>\n      </StyledPositions>\n\n      <StyledProgressBar>\n        <StyledProgress percent={percent} />\n      </StyledProgressBar>\n\n      <StyledPercent>\n        <StyledText>%</StyledText>\n      </StyledPercent>\n    </StyledSlider>\n  )\n})\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Highlight, HighlightType } from '../../../model/highlight';\nimport { Slider } from '../../shared/Slider';\n\ninterface HighlightCardProps {\n  highlight: Highlight;\n}\n\ninterface StyledCardProps {\n  default: boolean;\n}\n\nconst StyledCard = styled.div<StyledCardProps>`\n  height: ${(props) => props.default ? '160px' : '204px'};\n  width: 360px;\n  background: ${({ theme }) => theme.color.black_3};\n  padding: 22px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledTitle = styled.div`\n  font-size: 16px;\n`\n\nconst StyledValue = styled.div`\n  font-weight: ${({ theme }) => theme.fontWeight.bold};\n  font-size: 64px;\n  line-height: 75px;\n`\n\nconst StyledSubValue = styled.div`\n`\n\nexport const HighlightCard = ({ highlight }: HighlightCardProps): JSX.Element => {\n  return (\n    <StyledCard default={highlight.type === HighlightType.default}>\n      <StyledTitle>{highlight.label}</StyledTitle>\n\n      <StyledValue>{highlight.value}</StyledValue>\n\n      {highlight.subValue && <StyledSubValue>{highlight.subValue}</StyledSubValue>}\n\n      {highlight.type === HighlightType.slider && <Slider percent={highlight.value} />}\n    </StyledCard>\n  )\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { getActiveWeather } from '../../../store/selectors/weather';\nimport useHighlight from '../../../hooks/useHighlight';\nimport { Highlight } from '../../../model/highlight';\nimport { HighlightCard } from './HighlightCard';\nimport { breakpoints } from '../../../breakpoints';\n\nconst Wrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin-top: 25px;\n  \n  ${breakpoints.xl} {\n   align-items: center;\n  }\n`\n\nconst StyledListCard = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-template-rows: auto auto;\n  column-gap: 25px;\n  row-gap: 25px;\n  margin-top: 25px;\n  \n  ${breakpoints.xl} { \n    grid-template-columns: auto;\n    grid-template-rows: auto;\n  }\n`;\n\nconst StyledTitle = styled.div`\n  font-weight: bold;\n  font-size: 24px;\n  line-height: 28px;\n`\n\nexport default function HighlightListCard(): JSX.Element {\n  const activeWeather = useSelector(getActiveWeather);\n  const highlights = useHighlight(activeWeather);\n\n  return (\n    <Wrap>\n      <StyledTitle>Todayâ€™s Highlights</StyledTitle>\n      <StyledListCard>\n        {highlights.map((highlight: Highlight) => (\n          <HighlightCard key={highlight.value} highlight={highlight} />\n        ))}\n      </StyledListCard>\n    </Wrap>\n  )\n}\n","import { Weather } from '../model/weather';\nimport { Highlight, HighlightType } from '../model/highlight';\n\nexport default function useHighlight(weather: Weather): Highlight[] {\n  return [\n    {\n      label: 'Wind status',\n      value: `${weather.wind_speed?.toFixed()} mph`,\n      type: HighlightType.direction,\n      subValue: weather.wind_direction_compass,\n    },\n    {\n      label: 'Humidity',\n      value: `${weather.humidity}%`,\n      type: HighlightType.slider,\n    },\n    {\n      label: 'Visibility',\n      value: `${weather.visibility?.toFixed(1)} miles`,\n      type: HighlightType.default,\n    },\n    {\n      label: 'Air Pressure',\n      value: `${weather.air_pressure.toFixed()} mb`,\n      type: HighlightType.default,\n    },\n  ]\n}\n"],"sourceRoot":""}